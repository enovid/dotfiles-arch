"""""""""""""
"  PLUGINS  "
"""""""""""""
"" vim-plug plugin manager
call plug#begin('~/.vim/plugged')


"" Experimental
Plug 'vifm/vifm.vim'
Plug 'vimwiki/vimwiki', {'branch': 'dev'}
let g:vimwiki_ext2syntax = {}
Plug 'glacambre/firenvim', { 'do': { _ -> firenvim#install(0) } }
Plug 'LukeSmithxyz/vimling' 
Plug 'lambdalisue/suda.vim'
let g:suda_smart_edit = 1
Plug 'mboughaba/i3config.vim'
"Plug 'szymonmaszke/vimpyter'
Plug 'wellle/context.vim'
let g:context_enabled = 0
let g:context_highlight_tag = '<hide>'
Plug 'tpope/vim-abolish'
Plug 'puremourning/vimspector'
let g:vimspector_enable_mappings = 'HUMAN'
Plug 'liuchengxu/vista.vim'
let g:vista_default_executive = 'coc'
Plug 'dbeniamine/cheat.sh-vim'

"" Completion
""" ultisnips
"Plug 'SirVer/ultisnips'
"let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips']
"let g:UltiSnipsUsePythonVersion = 3
"let g:UltiSnipsExpandTrigger = '<c-;>'
"let g:UltiSnipsJumpForwardTrigger = '<c-l>'
"let g:UltiSnipsJumpBackwardTrigger = '<c-h>'

""" coc.nvim
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_filetype_map = {
        \ 'ipynb': 'python'
        \ }

""" auto pair brackets
Plug 'tmsvg/pear-tree'
let g:pear_tree_smart_openers = 1
let g:pear_tree_smart_closers = 1
let g:pear_tree_smart_backspace = 1


"" Extend Basic Vim Functionality
""" Cheatsheet for mappings
Plug 'lifepillar/vim-cheat40'

""" Search
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-fuzzy.vim'
Plug 'haya14busa/incsearch-easymotion.vim'
Plug 'nelstrom/vim-visual-star-search'

""" AutoSave 
" disabled by default, run :AutoSaveToggle to enable/disable it.
Plug 'vim-scripts/vim-auto-save'
let g:auto_save_in_insert_mode = 0  " do not save while in insert mode

""" Auto surround
Plug 'machakann/vim-sandwich'

""" Auto comment
Plug 'scrooloose/nerdcommenter'
let g:NERDCustomDelimiters = {
    \ 'markdown': { 'left': '<!--', 'right': '-->' },
    \ 'pandoc': { 'left': '<!--', 'right': '-->' }
\ }

""" Align multiple lines
Plug 'junegunn/vim-easy-align'

""" Movement within buffer
Plug 'easymotion/vim-easymotion'

""" More textobjects
Plug 'wellle/targets.vim'
let g:targets_nl = ['n', 'N']
Plug 'michaeljsmith/vim-indent-object'

""" Repeatability
Plug 'tpope/vim-repeat'
Plug 'vim-scripts/visualrepeat'

""" Move lines
Plug 'matze/vim-move'
let g:move_key_modifier = 'C'

""" Linewise diff
Plug 'AndrewRadev/linediff.vim'

""" Resize windows
Plug 'simeji/winresizer'
let g:winresizer_start_key = '<C-F>'
let g:winresizer_vert_resize = 10

""" Run asynchronous shell commands
Plug 'skywind3000/asyncrun.vim'


"" Filetype Specific
""" Markdown
Plug 'dkarter/bullets.vim'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }}
let g:mkdp_auto_close = 0
"let g:mkdp_markdown_css = '/Users/enovid/Documents/MarkdownCSS/nord.css'

""" Pandoc
Plug 'vim-pandoc/vim-pandoc'
let g:pandoc#keyboard#use_default_mappings = 0
let g:pandoc#folding#level = 100
let g:pandoc#folding#fdc = 0
let g:pandoc#formatting#equalprg = ""
let g:pandoc#spell#enabled = 0
let g:pandoc#hypertext#use_default_mappings = 0
Plug 'vim-pandoc/vim-pandoc-syntax'
let g:pandoc#syntax#codeblocks#embeds#langs = ["python"]
let g:pandoc#syntax#conceal#use = 0

""" Python syntax highlight
Plug 'Guzzii/python-syntax'
let g:python_highlight_indent_errors = 0
let g:python_highlight_space_errors = 0
let g:python_highlight_all = 1


"" Fuzzy Finding
""" fzf.vim
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
let g:fzf_command_prefix = 'Fzf'

""" fzf-preview.vim
Plug 'yuki-ycino/fzf-preview.vim'

""" fuzzy notes
Plug 'alok/notational-fzf-vim'
let g:nv_search_paths = ['~/notes']


"" Programming
""" Git
Plug 'tpope/vim-fugitive'

""" Set working directory to project root
Plug 'airblade/vim-rooter'
let g:rooter_silent_chdir = 1
let g:rooter_change_directory_for_non_project_files = 'current'

""" Toggle line-wrap for lists of arguments
Plug 'FooSoft/vim-argwrap'

""" REPL in buffer
Plug 'metakirby5/codi.vim'
"let g:codi#log = '/tmp/codi.log'
" Fix for lack out output in codi.vim https://github.com/metakirby5/codi.vim/issues/120
function! s:pp_remove_esc(line)
  " Replace [?2004l or [?2004h with newline
  return substitute(a:line, '[?2004l\|[?2004h', '\n', '')
endfunction
let g:codi#interpreters = {
      \ 'python': {
          \ 'bin': 'python',
          \ 'prompt': '^\(>>>\|\.\.\.\) ',
          \ 'preprocess': function('s:pp_remove_esc'),
          \ },
      \ }


""" Show stdout in buffer
Plug 'fboender/bexec'
let g:bexec_interpreter="/home/enovid/.asdf/shims/python"
let g:bexec_splitdir='hor'
let g:bexec_splitsize=''
let g:bexec_outputscroll=1

""" Outline file structure
Plug 'vim-voom/VOoM'

""" Insert print statements for debugging
Plug 'meain/vim-printer'
let g:vim_printer_print_below_keybinding = '<leader>i'
let g:vim_printer_print_above_keybinding = '<leader>I'
let g:vim_printer_items = {
      \ 'python': "print(f'{$}: \{{$}\}')",
      \ 'ipynb': "print(f'{$}: \{{$}\}')",
      \ }

""" vim-test
Plug 'vim-test/vim-test'
let test#strategy = "neovim"


"" Look and Feel
""" smooth scroll
Plug 'psliwka/vim-smoothie'

""" no-distract mode
Plug 'junegunn/goyo.vim'
let g:goyo_linenr = 1
let g:goyo_width = 100
let g:goyo_height = '100%'
Plug 'junegunn/limelight.vim'
let g:limelight_paragraph_span = 0

""" highlight yank
Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = 500

""" highlight color codes in text
Plug 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' }
"let g:Hexokinase_highlighters = ['virtual']
let g:Hexokinase_highlighters = ['backgroundfull']

""" manage colorschemes
Plug 'lifepillar/vim-colortemplate'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-colorscheme-switcher'
let g:colorscheme_switcher_exclude_builtins = 1
Plug 'Taverius/vim-colorscheme-manager'
let g:colorscheme_manager_define_mappings = 0
Plug 'kergoth/vim-hilinks'

""" colorschemes
Plug 'chriskempson/base16-vim'
Plug 'reedes/vim-colors-pencil'
Plug 'wolverian/minimal'
Plug 'ayu-theme/ayu-vim'
Plug 'w0ng/vim-hybrid'
Plug 'arcticicestudio/nord-vim'
let g:nord_uniform_diff_background = 1
let g:nord_uniform_status_lines = 0
Plug 'junegunn/seoul256.vim'
Plug 'cideM/yui'
Plug 'lifepillar/vim-solarized8'
Plug 'arzg/vim-plan9'
Plug 'arzg/vim-mayanfog'
Plug 'nightsense/cosmic_latte'
Plug 'logico-software/typewriter'
Plug 'enovid/inkstained-vim'
Plug 'yuttie/snowy-vim'
Plug 'kadekillary/subtle_solo'
Plug 'vim-scripts/darktango.vim'
Plug 'fxn/vim-monochrome'
Plug 'nightsense/snow'
Plug 'nightsense/seabird'
Plug 'kristiandupont/shades-of-teal'
Plug 'cormacrelf/vim-colors-github'
let g:github_colors_soft = 0
Plug 'vim-scripts/Cleanroom'
Plug 'yuttie/hydrangea-vim'
Plug 'Badacadabra/vim-archery'
Plug 'enovid/vim-colors-meh'
Plug 'lifepillar/vim-gruvbox8'
Plug 'cocopon/iceberg.vim'
Plug 'ajgrf/parchment'
Plug 'doums/darcula'
Plug 'arzg/vim-substrata'
let g:substrata_italic_comments = 0
let g:substrata_italic_functions = 0
Plug 'whatyouhide/vim-gotham'
Plug 'wolf-dog/nighted.vim'
Plug 'AlessandroYorba/Breve'
Plug 'arzg/vim-oldbook8'
Plug 'tek256/simple-dark'
Plug 'jonathanfilip/vim-lucius'
Plug 'camgunz/amber'
Plug 'xero/blaquemagick.vim'
Plug 'xero/sourcerer.vim'
Plug 'NerdyPepper/vim-colors-plain', {'branch': 'duotone'}
Plug 'hardselius/warlock'
Plug 'iCyMind/NeoSolarized'
" Neovim only
Plug 'tjdevries/colorbuddy.vim'
Plug 'ishan9299/modus-theme-vim'

"" Unused
"Plug 'amix/vim-zenroom2'
"Plug 'andreypopp/vim-colors-plain'
"Plug 'camspiers/animate.vim'
"Plug 'camspiers/lens.vim'
"let g:lens#animate = 0

call plug#end()


""""""""""""""""""""""
"  PLUGIN SETTINGS   "
""""""""""""""""""""""
"" coc.nvim
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" never show signcolumns
set signcolumn=no

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>g  <Plug>(coc-format-selected)
nmap <leader>g  <Plug>(coc-format-selected)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')
"
" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call   CocAction('fold', <f-args>)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Make <cr> for confirm completion https://github.com/neoclide/coc.nvim/wiki/Using-snippets#snippet-completion
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : 
                                           \"\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

"nnoremap <expr><C-f> coc#util#has_float() ? coc#util#float_scroll(1) : "\<C-f>"
"nnoremap <expr><C-b> coc#util#has_float() ? coc#util#float_scroll(0) : "\<C-b>"

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> <C-]> <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Highlight the symbol and its references when holding the cursor.
"autocmd CursorHold * silent call CocActionAsync('highlight')

" Mappings using CocList:
" Find symbol of current document.
nnoremap <silent> <Leader>v  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <Leader>s  :<C-u>CocList -I symbols<cr>

" Start debugging with coc-java-debug plugin
nmap <F1> :CocCommand java.debug.vimspector.start<CR>


"" BExec
"close BExec_output window
"nnoremap <silent> <Leader>G :BexecCloseOut<CR>


"" colorscheme manager
" Manage blacklist
"inoremap <silent> <F12> <C-O>:BlacklistAddColorScheme<CR>
"nnoremap <silent> <F12> :BlacklistAddColorScheme<CR>
"inoremap <silent> <S-12> <C-O>:BlacklistRemColorScheme<CR>
"nnoremap <silent> <S-12> :BlacklistRemColorScheme<CR>

" Show name of current colorscheme
nnoremap <S-Down> :colorscheme<CR>

" Cycle through colorschemes
nnoremap <silent> <S-Right> :NextColorScheme<CR>\|:colorscheme<CR>
nnoremap <silent> <S-Left> :PrevColorScheme<CR>\|:colorscheme<CR>
nnoremap <S-Up> :let &background = ( &background == "dark"? "light" : "dark" )<CR>


"" fzf
""" mappings
"nnoremap <silent> <leader>/ :cd %:h\|FzfRg<CR>
nnoremap <silent> <leader>/ :FzfRg<CR>
nnoremap <silent> <leader>o :FzfFiles<CR>
nnoremap <silent> <leader>O :FzfFiles ~<CR>
nnoremap <silent> <leader>h :FzfHistory<CR>
nnoremap <silent> <leader>H <ESC>:FzfHelptags<CR>
nnoremap <silent> <leader>; :FzfHistory:<CR>
nnoremap <silent> <leader>f :FzfBuffers<CR>
nnoremap <silent> <leader>m :FzfMaps<CR>
nnoremap <silent> <leader>L :FzfBLines<CR>
nnoremap <silent> <leader>" :FzfMarks<CR>
noremap  <silent> <leader>: :FzfCommands<CR>
nnoremap <silent> <leader>t :FzfColors<CR>

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

"""" fzf colors
"let g:fzf_colors =
"\ { 'fg':      ['fg', 'Normal'],
  "\ 'bg':      ['bg', 'Normal'],
  "\ 'hl':      ['fg', 'Comment'],
  "\ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  "\ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  "\ 'hl+':     ['fg', 'Statement'],
  "\ 'info':    ['fg', 'PreProc'],
  "\ 'border':  ['fg', 'Ignore'],
  "\ 'prompt':  ['fg', 'Conditional'],
  "\ 'pointer': ['fg', 'Exception'],
  "\ 'marker':  ['fg', 'Keyword'],
  "\ 'spinner': ['fg', 'Label'],
  "\ 'header':  ['fg', 'Comment'] }

""" fzf-preview.vim
"nnoremap <silent> <leader>h :FzfPreviewOldFiles<CR>


"" ultiSnips
" enable :Snippets command to search snippet descriptions
"command! -bar -bang Snippets call fzf#vim#snippets({'options': '-n ..'}, <bang>0)
"nnoremap <C-S> :Snippets<CR>
"nnoremap <Leader>s :Snippets<CR>


"" easymotion
" Use uppercase target labels and type as a lower case
let g:EasyMotion_use_upper = 1
let g:EasyMotion_keys = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ;'
let g:EasyMotion_smartcase = 1

" Move to line
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader><Leader>l <Plug>(easymotion-bd-jk)
nmap <Leader><Leader>l <Plug>(easymotion-overwin-line)

" Move to end of word
map  <Leader>e <Plug>(easymotion-bd-e)
map  <Leader>E <Plug>(easymotion-bd-E)

" Jump to any two characters on any window
"nmap <Leader>s <Plug>(easymotion-overwin-f2)


"" haya14busa incsearch
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
let g:incsearch#auto_nohlsearch = 1
"TODO add toggle for zz after n
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" fuzzy search
map z/ <Plug>(incsearch-fuzzy-/)
map z? <Plug>(incsearch-fuzzy-?)
map zg/ <Plug>(incsearch-fuzzy-stay)


"" easyalign
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


"" notational-fzf-vim
nnoremap <silent> <leader>a :NV<CR>


"" goyo
nnoremap <silent> <leader>z :Goyo<CR>
nnoremap <silent> <leader>Z :Goyo 60-5<CR>

function! s:goyo_enter()
  set noshowmode
  set nonumber
  set norelativenumber
endfunction
function! s:goyo_leave()
  set showmode
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()


"" voom
nnoremap <leader>V :Goyo!\|Voom python<CR>

"" pear-tree
imap <expr><tab> pear_tree#GetSurroundingPair() == [] ? "\<Tab>" : pear_tree#insert_mode#JumpOut()
imap <S-Enter> <Plug>(PearTreeExpand)


"" limelight
nnoremap <leader>l :Limelight!!<CR>
" Use visual selection
xmap <Leader>l <Plug>(Limelight)


"" vim-hilinks
map <Leader><Leader>H <Plug>HiLinkTrace
map <Leader><Leader>h :HLT!<CR>


"" vim-sandwich
"disable s as recommended by vim-sandwich manual
nmap s <Nop>
xmap s <Nop>
" delete the function surrounding 'args'  e.g. object.method(args)
let g:sandwich#magicchar#f#patterns = [
\   {
\     'header' : '\<\%(\h\k*\.\)*\h\k*',
\     'bra'    : '(',
\     'ket'    : ')',
\     'footer' : '',
\   },
\ ]


"" python motions
" Enable pymode motions e.g. aC iC aM iM
" located in ~/.vim/autoload/pymode/motion.vim
let g:pymode_motion = 1


"" vimwiki
" global keybinds
nmap <Leader><Leader>ww <Plug>VimwikiIndex
nmap <Leader><Leader>wt <Plug>VimwikiTabIndex
nmap <Leader><Leader>ws <Plug>VimwikiUISelect
nmap <Leader><Leader>wi <Plug>VimwikiDiaryIndex
nmap <Leader><Leader>w<Leader>w <Plug>VimwikiMakeDiaryNote
nmap <Leader><Leader>w<Leader>t <Plug>VimwikiTabMakeDiaryNote
nmap <Leader><Leader>w<Leader>y <Plug>VimwikiMakeYesterdayDiaryNote
nmap <Leader><Leader>w<Leader>m <Plug>VimwikiMakeTomorrowDiaryNote

" local keybinds
nmap <Leader><Leader>w<Leader>i <Plug>VimwikiDiaryGenerateLinks
nmap <Leader><Leader>wh <Plug>Vimwiki2HTML
nmap <Leader><Leader>whh <Plug>Vimwiki2HTMLBrowse
nmap <Leader><Leader>wn <Plug>VimwikiGoto
nmap <Leader><Leader>wd <Plug>VimwikiDeleteLink
nmap <Leader><Leader>wr <Plug>VimwikiRenameLink

augroup vimwiki_mapping
  autocmd!
  autocmd FileType vimwiki nmap <buffer> <Leader>l <Plug>VimwikiToggleListItem
  autocmd FileType vimwiki vmap <buffer> <Leader>l <Plug>VimwikiToggleListItem
augroup END

function! VimwikiLinkHandler(link)
  " Use Vim to open external files with the 'vfile:' scheme.  E.g.:
  "   1) [[vfile:~/Code/PythonProject/abc123.py]]
  "   2) [[vfile:./|Wiki Home]]
  let link = a:link
  if link =~# '^vfile:'
    let link = link[1:]
  else
    return 0
  endif
  let link_infos = vimwiki#base#resolve_link(link)
  if link_infos.filename == ''
    echomsg 'Vimwiki Error: Unable to resolve link!'
    return 0
  else
    exe 'e ' . fnameescape(link_infos.filename)
    return 1
  endif
endfunction


"" argwrap
nnoremap <silent> ,a :ArgWrap<CR>


"" vimpyter
autocmd Filetype ipynb nmap <silent><Leader>b :VimpyterInsertPythonBlock<CR>
"autocmd Filetype ipynb nmap <silent><Leader>j :VimpyterStartJupyter<CR>
"autocmd Filetype ipynb nmap <silent><Leader>n :VimpyterStartNteract<CR>


""""""""""""""""""""""
"  GENERAL SETTINGS  "
""""""""""""""""""""""
"" Vim options
set nocompatible              " be iMproved, required
filetype plugin on

" search
set incsearch       " Find the next match as we type the search
set hlsearch        " Highlight searches by default
set ignorecase      " Ignore case when searching...
set smartcase       " ...unless we type a capital

" allow backspace to delete everything
set backspace=indent,eol,start 

" tabs
set expandtab       " tabs are spaces
set shiftwidth=4    " affects  >>, <<, and ==
set softtabstop=4   " number of spaces in tab when editing
" set tabstop=2     " number of visual spaces per TAB
augroup tabsize_markdown
  autocmd!
  autocmd FileType markdown,sql setlocal shiftwidth=2
  autocmd FileType markdown,sql setlocal softtabstop=2
augroup END


" tab-completion for all file-related tasks
" searches down into subfolders
set path+=**

" display all matching files when we tab complete
" - Hit tab to :find by partial match
" - Use * to make it fuzzy
set wildmenu

" allow changing buffers without save
set hidden 

" show command as it's typed
set showcmd

" don't auto-insert first autocomplete result 
set completeopt=menuone,noinsert

" don't update the screen while executing non-typed commands e.g. macros
set lazyredraw

" keep cursor in same column when scrolling
set nostartofline

" disable line,col ruler in neovim
set noruler

" disable statusline except for splits
set laststatus=2

" show line numbers
set number

" show linenumbers relative to currentline
set relativenumber

" make line number column more narrow
set numberwidth=2

" number of lines to alway show at top and bottom of buffer
set scrolloff=1

" size of command history
set history=10000

" always create new file in current file directory
set autochdir

" don't wrap lines
set nowrap

" persistent undo
set undofile
set undodir=~/.vim/undodir

" open vertical split to the right
set splitright

" Disable the default Vim startup message.
set shortmess+=I

"" GUI, cursor, font
if has("gui_running")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
    set guioptions-=r "remove right-hand scroll bar
    set guioptions-=L "remove left-hand scroll bar
    set guicursor+=n-v-c:blinkon0 "Disable blinking
    set guicursor+=a:blinkon0 "Disable all blinking
    set guifont=RobotoMono-Light:h15
  endif
endif
" Cursor width
"let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
"let &t_SR = "\<Esc>]50;CursorShape=2\x7" 
"let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode


"" Color support
" Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif


"" Colorscheme (Active)
set background=light
"set notermguicolors
"colorscheme sourcerer


""""""""""""""
"  MAPPINGS  "
""""""""""""""
"" General
" set leader key
map <Space> <Leader>
map <Space><Space> <Leader><Leader>

" press backspace to switch to previous buffer
nnoremap <BS> <C-^>

" yank or paste from system clipboard
noremap <Leader>Y "*y
noremap <Leader>P "*p
noremap <Leader>y "+y
noremap <Leader>p "+p

" yank entire buffer to system clipboard
nnoremap <Leader><Leader>y :%y+<CR>

" cycle through open buffers
nnoremap <C-N> :bnext<CR>
nnoremap <C-P> :bprev<CR>

" save current buffer
nnoremap <silent> <leader>w :w<CR>

" close buffer
nnoremap <silent> <leader>n :bd<CR>

" close buffer without losing the split window
nnoremap <silent> <C-c> :bp\|bd #<CR>

" copy text to the end-of-line
nnoremap Y y$

" preserve column position when jumping to mark
nnoremap ' `

" clear the search highlights
nmap <Esc><Esc> <Esc>:nohlsearch<CR>

" open url under cursor
nnoremap <silent> gx :<C-u>call pandoc#hypertext#OpenSystem()<cr>

" execute dot command on each line of visual selection
vnoremap . :norm.<CR>

" disable entering EX mode
nnoremap Q <Nop>

" Use g[jk] for vertical movement in wrapped lines when no count is specified
nnoremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')

" Move cursor to top/bottom line before scrolling the page
nnoremap <expr> H line(".") - &scrolloff == line("w0") ? "\<C-B>H" : "H"
nnoremap <expr> L line(".") + &scrolloff == line("w$") ? "\<C-F>L" : "L"


"" Current line text object
" exclude linebreak and starts from first non-blank character
xnoremap il g_o^
onoremap il :normal vil<CR>
" includes linebreak 
xnoremap al $o0
onoremap al :normal val<CR>


"" Windows and splits
"move window to thin vertical column on left 
nnoremap <C-w>a :wincmd H\|30wincmd <bar><CR>
"move window to 4/5 bottom
nnoremap <C-w>b :wincmd J\|30wincmd _<CR>
"move window to 4/5 right
nnoremap <C-w>d :wincmd L\|99wincmd <bar><CR>
"close quicklist and preview windows 
nnoremap <S-Esc> :pc\|ccl<CR> 


"" Show highlight group under cursor
"map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
"\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
"\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>


"" Python
augroup python_run_mappings
    autocmd!
    "autocmd FileType python nnoremap <Leader>r :w\|!python3 %<CR>
    "autocmd FileType python nnoremap <silent> <Leader>d :w\|AsyncRun -mode=terminal python3 %<CR>
    autocmd FileType python nnoremap <silent> <Leader>d :w\|CocCommand python.execInTerminal<CR>
    autocmd FileType python nnoremap <silent> <Leader>R :AsyncRun -mode=terminal python3<CR>
    autocmd FileType python nnoremap <silent> <Leader>r :w\|Goyo!\|Bexec()<CR>
    autocmd FileType python vnoremap <silent> <Leader>d :w\|BexecVisual()<CR>
    autocmd FileType python nnoremap <silent> <leader>D :AsyncRun -mode=terminal python3 -m pudb %:p<CR>
augroup END
" Macros
let @p="A\<cr>import pdb; pdb.set_trace()\<esc>"
let @b="Oimport pudb; pu.db\<esc>"
noremap <Leader>b @b
let @m="A\<cr>if __name__ == '__main__':\<esc>\<cr>\<tab>"
let @n="A\import numpy as np;import matplotlib.pyplot as plt;import pandas as pd;import seaborn as sns;\<ESC>"


"" Java
function! CompileRunGcc()
  exec "w"
  if &filetype ==# 'java'
    exec "!javac %"
    if !v:shell_error
      exec "!time java -cp %:p:h %:t:r"
    endif
  endif
endfunction

augroup java_run_mappings
    autocmd!
    autocmd FileType java nnoremap <Leader>d :call CompileRunGcc()<CR>
augroup END


"" SQL
nnoremap <silent> <Leader>G :CocCommand sql.Format<CR>


"" Neovim terminal
if has('nvim')
    " Mapping to enter normal mode
    tnoremap <C-\><C-\> <C-\><C-n>
    " Exit and close terminal
    tnoremap <C-]><C-]> <C-\><C-n>:bd!<CR>
    tnoremap <C-q> <C-\><C-n>:bd!<CR>
    "" Scroll lines
    "tnoremap <C-J>
endif

" Open terminal in horizontal split
nnoremap <Leader>[ :sp\|term<CR>i


"" Open vifm in builtin terminal
"nnoremap <Leader>v :AsyncRun -mode=terminal vifm .<CR><C-\><C-n><C-w>Ki


""""""""""""""""""""""""""""""""
"  AUTOCOMMANDS AND FUNCTIONS  "
""""""""""""""""""""""""""""""""
"" Autofolding .vimrc
" see http://vimcasts.org/episodes/writing-a-custom-fold-expression/
""" defines a foldlevel for each line of code
function! VimFolds(lnum)
  let s:thisline = getline(a:lnum)
  if match(s:thisline, '^"" ') >= 0
    return '>2'
  endif
  if match(s:thisline, '^""" ') >= 0
    return '>3'
  endif
  let s:two_following_lines = 0
  if line(a:lnum) + 2 <= line('$')
    let s:line_1_after = getline(a:lnum+1)
    let s:line_2_after = getline(a:lnum+2)
    let s:two_following_lines = 1
  endif
  if !s:two_following_lines
      return '='
    endif
  else
    if (match(s:thisline, '^"""""') >= 0) &&
       \ (match(s:line_1_after, '^"  ') >= 0) &&
       \ (match(s:line_2_after, '^""""') >= 0)
      return '>1'
    else
      return '='
    endif
  endif
endfunction

""" defines a foldtext
function! VimFoldText()
  " handle special case of normal comment first
  let s:info = '('.string(v:foldend-v:foldstart).' l)'
  if v:foldlevel == 1
    let s:line = ' ◇ '.getline(v:foldstart+1)[3:-2]
  elseif v:foldlevel == 2
    let s:line = '   ●  '.getline(v:foldstart)[3:]
  elseif v:foldlevel == 3
    let s:line = '     ▪ '.getline(v:foldstart)[4:]
  endif
  if strwidth(s:line) > 80 - len(s:info) - 3
    return s:line[:79-len(s:info)-3+len(s:line)-strwidth(s:line)].'...'.s:info
  else
    return s:line.repeat(' ', 80 - strwidth(s:line) - len(s:info)).s:info
  endif
endfunction

""" set foldsettings automatically for vim files
augroup fold_vimrc
  autocmd!
  autocmd FileType vim 
                   \ setlocal foldmethod=expr |
                   \ setlocal foldexpr=VimFolds(v:lnum) |
                   \ setlocal foldtext=VimFoldText() |
     "              \ set foldcolumn=2 foldminlines=2
augroup END


"" Custom splits
function! ClearPymodeCustomSplit()
    if exists('#PymodeSplitLeft#BufEnter')
      augroup PymodeSplitLeft
        autocmd!
      augroup END
    endif
    if exists('#PymodeSplitBottom#BufEnter')
      augroup PymodeSplitBottom
        autocmd!
      augroup END
    endif
endfunction

" optional argument to set split width 
function! TogglePymodeSplitLeft(...)
    let default_width = 30
    let s:widthnr = get(a:, 1, default_width)
    augroup PymodeSplitLeft
        autocmd!
        autocmd BufEnter __run__,__doc__ :wincmd H
        execute 'autocmd BufEnter __run__ :' . s:widthnr . 'wincmd |'
        autocmd BufEnter __run__,__doc__ :setlocal nobuflisted
        "autocmd BufEnter __run__,__doc__ :30wincmd |
        "autocmd BufEnter __run__,__doc__ setlocal wrap
    augroup END
    augroup PymodeSplitBottom
        autocmd!
    augroup END
endfunction

" optional argument to set split height
function! TogglePymodeSplitBottom(...)
    let default_height = 15
    let heightnr = get(a:, 1, default_height)
    augroup PymodeSplitBottom
        autocmd!
        execute 'autocmd BufEnter __run__ :' . heightnr . 'wincmd _'
    augroup END
    augroup PymodeSplitLeft
        autocmd!
    augroup END
endfunction


"" Set Kitty terminal colors
" These functions use Kitty's remote to modify terminal colors according to
" the current colorscheme in Vim.
augroup restore_terminal_color_on_quit
    autocmd!
    autocmd VimLeave * call KittyResetColors()
augroup END

function! SetMatchingTerminalColors()
    call KittyUpdateTerminalColorscheme()
    call KittyCursorColorschemeColor()
endfunction

" Set Kitty's foreground and background colors to match current colorscheme
function! KittyUpdateTerminalColorscheme()
    let l:normal_fg = synIDattr(hlID('Normal'), 'fg')
    let l:normal_bg = synIDattr(hlID('Normal'), 'bg')
    silent call system('kitty @ set-colors -c background=' . l:normal_bg . ' foreground=' . l:normal_fg)
endfunction

" Set Kitty's cursor color to match current colorscheme
function! KittyCursorColorschemeColor()
    let l:cursor_fg = synIDattr(hlID('Cursor'), 'fg')
    let l:cursor_bg = synIDattr(hlID('Cursor'), 'bg')
    silent call system('kitty @ set-colors -c cursor=' . l:cursor_bg . ' cursor_text_color=' . l:cursor_fg)
endfunction

" Reset terminal colors to the defaults in kitty.conf
function! KittyResetColors()
    silent call system('kitty @ set-colors --reset')
endfunction


"" Functions called on changing colorscheme/filetype
" Custom colorscheme modifications applied when colorscheme is changed
function! s:colorscheme_customize() abort
    highlight LineNr guibg=bg
    highlight CursorLineNr guibg=bg

    if g:colors_name =~# 'sourcerer' 
        set notermguicolors
        highlight LineNr ctermbg=NONE
    endif


    if g:colors_name =~# 'solarized8_high' 
        highlight VertSplit guifg=#93a1a1
    endif

    if g:colors_name =~# 'base16-grayscale-dark' 
        highlight MatchParen guifg=#000000
    endif

    if g:colors_name =~# 'base16-grayscale-light' 
        highlight MatchParen guifg=#FFFFFF
    endif

    if g:colors_name =~# 'blaquemagick' 
        set notermguicolors
        highlight LineNr ctermbg=NONE
        highlight CursorLineNr ctermfg=249 ctermbg=NONE
        highlight IncSearch ctermfg=16 ctermbg=66
        highlight Search ctermfg=16 ctermbg=66
        highlight MatchParen ctermfg=255 ctermbg=242
        highlight StatusLine ctermbg=234 ctermfg=242
        highlight StatusLineNC ctermbg=234 ctermfg=237
        highlight VertSplit ctermfg=234 ctermbg=234
    endif

    if g:colors_name =~# 'amber' 
        highlight VertSplit guifg=bg
        highlight VertSplit guibg=fg
    endif

    if g:colors_name =~# 'nord' 
        " Remove underline for highlighted yank
        highlight HighlightedyankRegion ctermfg=15 ctermbg=12 guifg=#ECEFF4 guibg=#5E81AC
    endif

    if g:colors_name =~# 'base16' 
        call Base16hi("LineNr", "", g:base16_gui00, "", "") 
        call Base16hi("CursorLineNr", "", g:base16_gui00, "", "") 
        call Base16hi("VertSplit", "", g:base16_gui00, "", "") 
        call Base16hi("StatusLineNC", "", g:base16_gui00, "", "") 
        highlight clear ModeMsg
    endif

    if g:colors_name =~# 'darcula'
        "highlight Cursor guibg=fg guifg=bg
        hi! link pythonEqual Normal
    endif

    if g:colors_name =~# 'mayanfog'
        highlight LineNr guibg=bg
        highlight CursorLineNr guibg=bg
    endif

    if g:colors_name =~# 'snowy'
        highlight Cursor guifg=bg
        highlight LineNr guibg=bg
        highlight CursorLineNr guibg=bg
    endif

    if g:colors_name =~# 'inkstained'
        highlight Cursor guifg=bg
        highlight LineNr guibg=bg
        highlight CursorLineNr guibg=bg
    endif

    if g:colors_name =~# 'pencil'
        highlight CursorLineNr guibg=bg
    endif

    if g:colors_name =~# 'plain'
        highlight ModeMsg guibg=NONE
        highlight Search guifg=#FFFFFF
    endif
endfunction

augroup nord-theme-overrides
    autocmd!
    " Use nord3_gui_bright for fold fg
    autocmd ColorScheme nord highlight Folded guifg=#7b88a1
augroup END

" Link python syntax groups to default highlight groups
function MyCustomHighlights()
    hi! link pythonClass       Function
    hi! link pythonFunction    Function
    hi! link pythonBuiltinFunc Type
    hi! link pythonBytesEscape SpecialChar
    hi! link pythonStrFormat   Statement
    "hi! link pythonDefine      Define
    hi! link pythonDefine      Statement
    hi! link pythonOperator    Operator
    hi! link pythonEqual       Operator
endfunction

" Autcmd responsible for all modifications to color & highlight 
augroup on_change_colorscheme
    autocmd!
    autocmd FileType python call MyCustomHighlights()
    autocmd ColorScheme * call MyCustomHighlights()
    " colorscheme_customize() called after MyCustomHighlights() to enforce
    " scheme specific modifications
    autocmd ColorScheme * call s:colorscheme_customize()
    " Update terminal colors to match the current colorscheme
    autocmd ColorScheme * call SetMatchingTerminalColors()
augroup END


"" Fast escape
" lower timeout duration to eliminate delay when exiting insert mode
" set timeoutlen=1000 " set mapping delays
" set ttimeoutlen=0   " set key code delays
augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
augroup END


"" Output result of an EX command into split buffer
function! Output(cmd)
  redir => message
  silent execute a:cmd
  redir END
  if empty(message)
    echoerr "no output"
  else
    " use "new" instead of "tabnew" below for split windows instead of tabs
    new
    setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
    silent put=message
  endif
endfunction
command! -nargs=+ -complete=command Output call Output(<q-args>)


"" Toggle zoom on window 
" Zoom / Restore window. (make it the only window)
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <C-W>m :ZoomToggle<CR>


"" Change window settings for BExec
function! SetBexecSplitSize(...) " optional argument to set split width 
    let s:widthnr = get(a:, 1, g:bexec_splitsize)
    augroup bexec_window
        autocmd!
        autocmd BufEnter -BExec_output- :setlocal nowrap
        execute 'autocmd BufEnter -BExec_output- :' . s:widthnr . 'wincmd |'
    augroup END
endfunction
call SetBexecSplitSize(g:bexec_splitsize)


"" Return to last edit position when opening files
augroup return_to_last_edit_position
  autocmd!
  autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
augroup END


"" Avoid scrolling when switching buffers
" https://vim.fandom.com/wiki/Avoid_scrolling_when_switch_buffers
" Save current view settings on a per-window, per-buffer basis.
function! AutoSaveWinView()
    if !exists("w:SavedBufView")
        let w:SavedBufView = {}
    endif
    let w:SavedBufView[bufnr("%")] = winsaveview()
endfunction

" Restore current view settings.
function! AutoRestoreWinView()
    let buf = bufnr("%")
    if exists("w:SavedBufView") && has_key(w:SavedBufView, buf)
        let v = winsaveview()
        let atStartOfFile = v.lnum == 1 && v.col == 0
        if atStartOfFile && !&diff
            call winrestview(w:SavedBufView[buf])
        endif
        unlet w:SavedBufView[buf]
    endif
endfunction

" When switching buffers, preserve window view.
if v:version >= 700
    autocmd BufLeave * call AutoSaveWinView()
    autocmd BufEnter * call AutoRestoreWinView()
endif


"" Spell check for markdown
augroup markdown_spellcheck
  autocmd!
  "autocmd FileType markdown setlocal spell
  autocmd FileType markdown inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u
augroup END


"" Auto compile latex on save
augroup compile_on_save_latex
    autocmd!
    autocmd FileType tex nnoremap <buffer> <Leader>d :w\|AsyncRun xelatex -interaction=nonstopmode %<CR>
augroup END

"" Create marpit presentation pdf
augroup compile_on_save_marpit
    autocmd!
    autocmd BufRead *presentation.md nnoremap <buffer> <Leader>w :w\|AsyncRun marp --pdf %<CR>
augroup END

"" Remember and restore folds 
" COMMENTED OUT DUE TO FT DETECT CONFLICT WITH FIRENVIM
" Taken from: https://stackoverflow.com/a/37558470/10898386
" Reason to add filetype detect: https://vi.stackexchange.com/questions/19326/vim-conceal-doesnt-work/19333#19333
"augroup remember_folds
    "autocmd!
    "autocmd BufWinLeave ?* silent! mkview | filetype detect
    "autocmd BufWinEnter ?* silent! loadview | filetype detect
"augroup END
